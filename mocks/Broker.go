// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	broker "github.com/micro/go-micro/v2/broker"

	mock "github.com/stretchr/testify/mock"
)

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *Broker) Address() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Connect provides a mock function with given fields:
func (_m *Broker) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields:
func (_m *Broker) Disconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Init provides a mock function with given fields: _a0
func (_m *Broker) Init(_a0 ...broker.Option) error {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...broker.Option) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Options provides a mock function with given fields:
func (_m *Broker) Options() broker.Options {
	ret := _m.Called()

	var r0 broker.Options
	if rf, ok := ret.Get(0).(func() broker.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(broker.Options)
	}

	return r0
}

// Publish provides a mock function with given fields: topic, m, opts
func (_m *Broker) Publish(topic string, m *broker.Message, opts ...broker.PublishOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic, m)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *broker.Message, ...broker.PublishOption) error); ok {
		r0 = rf(topic, m, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *Broker) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Subscribe provides a mock function with given fields: topic, h, opts
func (_m *Broker) Subscribe(topic string, h broker.Handler, opts ...broker.SubscribeOption) (broker.Subscriber, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic, h)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 broker.Subscriber
	if rf, ok := ret.Get(0).(func(string, broker.Handler, ...broker.SubscribeOption) broker.Subscriber); ok {
		r0 = rf(topic, h, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(broker.Subscriber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, broker.Handler, ...broker.SubscribeOption) error); ok {
		r1 = rf(topic, h, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
